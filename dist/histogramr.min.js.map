{"version":3,"sources":["lib/Maybe.js","lib/csv.js","index.js"],"names":["$__System","registerDynamic","$__require","exports","module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","Maybe","x","this","__value","f","isNothing","of","undefined","default","toCsvValue","theValue","sDelimiter","t","_typeof","output","stringDelimiter","String","toCsv","objArray","cDelimiter","l","names","name","obj","row","n","nl","hasOwnProperty","push","join","substring","Symbol","iterator","constructor","_interopRequireDefault","__esModule","_toConsumableArray","arr","Array","isArray","arr2","from","parseChartColumns","keys","monthOfTheYear","forEach","map","val","Number","getTaxaList","startLine","reduce","prev","current","index","tabs","split","getTaxa","position","getSampleSize","slice","sampleToCsv","sample","apply","_csv2","taxaToCsv","val2","pop","processFile","str","lines","_Maybe2","sampleSize","taxaCount","taxaList","taxaCsv","allCsv","_Maybe","_csv","memoize","fn","cache","_len","arguments","args","_key","stringifiedArgs","JSON","stringify","result","_monthOfTheYear","months","oneIndex"],"mappings":"0pIAAAA,GAAAC,gBAAA,QAAA,EAAA,SAAAC,EAAAC,EAAAC,eAQA,SAAAC,GAAAC,EAAAC,GAAkD,KAAAD,YAAAC,IAA0C,KAAA,IAAAC,WAAA,qCAN5FC,OAAAC,eAAAP,EAAA,cAAAQ,OAAA,GAIA,IAAAC,GAAA,WAAiC,QAAAC,GAAAC,EAAAC,GAA2C,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAyC,GAAAE,GAAAH,EAAAC,EAA2BE,GAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,SAAAF,KAA2BA,EAAAG,UAAA,GAA0BZ,OAAAC,eAAAI,EAAAI,EAAAI,IAAAJ,IAA+D,MAAA,UAAAX,EAAAgB,EAAAC,GAA2L,MAAhID,IAAgBV,EAAAN,EAAAkB,UAAAF,GAAmDC,GAAmBX,EAAAN,EAAAiB,GAA0CjB,MAE/XmB,EAAA,WAGpJ,QAAAA,GAAAC,GACItB,EAAAuB,KAAAF,GAEAE,KAAAC,QAAAF,EA6BJ,MA5BAf,GAAAc,IAGIJ,IAAA,MACAX,MAAA,SAAAmB,GAEI,MAAAF,MAAAG,YAAAL,EAAAM,GAAA,MAAAN,EAAAM,GAAAF,EAAAF,KAAAC,aAGJP,IAAA,YACAX,MAAA,WAEI,MAAA,QAAAiB,KAAAC,SAAAI,SAAAL,KAAAC,WAGJP,IAAA,OACAX,MAAA,WAEI,MAAAiB,MAAAG,YAAAL,EAAAM,GAAA,MAAAJ,KAAAC,WAGJP,IAAA,OACAX,MAAA,WAEI,MAAAiB,MAAAC,YAIRH,IA3CJ,OA8CAA,GAAAM,GAAA,SAAAL,GACI,MAAA,IAAAD,GAAAC,IAGJxB,EAAA+B,QAAAR,EAlDAtB,EAAAD,UCAAH,EAAAC,gBAAA,QAAA,EAAA,SAAAC,EAAAC,EAAAC,eAaA,SAAA+B,GAAAC,EAAAC,GACI,GAAAC,GAAA,mBAAAF,GAAA,YAAAG,EAAAH,GACAI,EAAA,OACIC,EAAA,MAIgJ,OAFtFA,GAA9D,mBAAAJ,IAAA,OAAAA,EAA8D,IAA2BA,EAEpDG,EAFgF,cAAAF,GAAA,OAAAA,EAEhF,GAAiB,WAAAA,EAAoBD,EAAAD,EAAAC,EAAiDK,OAAAN,GAG/H,QAAAO,GAAAC,EAAAP,EAAAQ,GAUI,GAAA7B,GAAA,OACI8B,EAAA,OACAC,KACAC,EAAA,OACArC,EAAA,OACAsC,EAAA,OACAC,EAAA,OACAV,EAAA,GACAW,EAAA,OACAC,EAAA,MAQJ,KALA,mBAAAf,IAAA,OAAAA,IACIA,EAAA,KACJ,mBAAAQ,IAAA,OAAAA,IAEIA,EAAA,KACJ7B,EAAA,EAAA8B,EAAAF,EAAA3B,OAAAD,EAAA8B,EAAA9B,GAAA,EAAA,CAMI,GAFAiC,EAAAL,EAAA5B,GACAkC,EAAA,GACA,IAAAlC,EAAA,CAEI,IAAAgC,IAAAC,GACIA,EAAAI,eAAAL,KACID,EAAAO,KAAAN,GACAE,IAAAb,EAAAW,EAAAX,EAAAQ,GAAAU,KAAA,IAERL,GAAAA,EAAAM,UAAA,EAAAN,EAAAjC,OAAA,GAEAuB,GAAAU,EAKJ,IAJAV,GAAA,KAGAU,EAAA,GACAC,EAAA,EAAAC,EAAAL,EAAA9B,OAAAkC,EAAAC,EAAAD,GAAA,EACIH,EAAAD,EAAAI,GACAxC,EAAAsC,EAAAD,GACAG,EAAA,IACID,GAAA,KACJA,GAAAf,EAAAxB,EAAA,IAEJ6B,IAAAU,EAEJ,MAAAV,GA7EJ/B,OAAAC,eAAAP,EAAA,cAAAQ,OAAA,GAIA,IAAA4B,GAAA,kBAAAkB,SAAA,gBAAAA,QAAAC,SAAA,SAAAT,GAAqG,aAAAA,IAAmB,SAAAA,GAAqB,MAAAA,IAAA,kBAAAQ,SAAAR,EAAAU,cAAAF,QAAAR,IAAAQ,OAAAhC,UAAA,eAAAwB,GAN7I,OAkFA9C,GAAA+B,QAAAS,EAlFAvC,EAAAD,UCAAH,EAAAC,gBAAA,KAAA,IAAA,MAAA,EAAA,SAAAC,EAAAC,EAAAC,eAeA,SAAAwD,GAAAX,GAAuC,MAAAA,IAAAA,EAAAY,WAAAZ,GAAAf,QAAAe,GAAuD,QAAAa,GAAAC,GAE3D,GAAAC,MAAAC,QAAAF,GAAA,CAA0B,IAAA,GAAA/C,GAAA,EAAgBkD,EAAAF,MAAAD,EAAA9C,QAAAD,EAAA+C,EAAA9C,OAAAD,IAAiDkD,EAAAlD,GAAA+C,EAAA/C,EAAkB,OAAAkD,GAAwB,MAAAF,OAAAG,KAAAJ,GAgBxK,QAAAK,GAAAL,GAEI,GAAAd,KAUA,OARAxC,QAAA4D,KAAAC,KAAAC,QAAA,SAAAjD,GAEI2B,EAAA3B,GAAAgD,IAAAhD,GAAAkD,IAAA,SAAAC,GAEI,MAAAC,QAAAX,EAAAU,QAIRxB,EACJ,QAAA0B,GAAAZ,GAII,GAAAa,GAAA,EAEA,OAAAb,GAAAc,OAAA,SAAAC,EAAAC,EAAAC,GAEI,GAAAA,EAAAJ,EAAuB,MAAAE,EAAW,IAAAG,GAAAF,EAAAG,MAAA,KAIsB,OAAxDD,GAAAhE,SAAiB6D,EAAAG,EAAA,IAAAb,EAAAa,IAAuCH,OAqBhE,QAAAK,GAAApB,GAEI,GAAAqB,GAAA,EAEA,OAAAV,QAAAX,EAAAqB,GAAAF,MAAA,MAAA,IACJ,QAAAG,GAAAtB,GAII,GAAAqB,GAAA,EAEA,OAAAhB,GAAAL,EAAAqB,GAAAF,MAAA,MAAAI,MAAA,IACJ,QAAAC,GAAAd,GAII,GAAAe,IAAA,cAOA,OALA/E,QAAA4D,KAAAI,GAAAF,QAAA,SAAAjD,GAEIkE,EAAAlC,KAAAmC,MAAAD,EAAA1B,EAAAW,EAAAnD,QAGJ,EAAAoE,EAAAxD,UAAAsD,IAAAN,MAAA,MAAAI,MAAA,GACJ,QAAAK,GAAAlB,GAII,GAAAV,KAqBA,OAnBAtD,QAAA4D,KAAAI,GAAAF,QAAA,SAAAjD,GAEI,GAAA2B,KAEAA,GAAAD,KAAA1B,EAEAb,OAAA4D,KAAAI,EAAAnD,IAAAiD,QAAA,SAAAqB,GAEI3C,EAAA2C,EAAA,MAAAnB,EAAAnD,GAAAsE,GAAA,GACA3C,EAAA2C,EAAA,MAAAnB,EAAAnD,GAAAsE,GAAA,GACA3C,EAAA2C,EAAA,MAAAnB,EAAAnD,GAAAsE,GAAA,GACA3C,EAAA2C,EAAA,MAAAnB,EAAAnD,GAAAsE,GAAA,KAGJ7B,EAAAT,KAAAL,KAGJc,EAAA8B,OAEA,EAAAH,EAAAxD,SAAA6B,GACJ,QAAA+B,GAAAC,GAII,GAAAC,GAAAD,EAAAb,MAAA,KAEA,OAAAe,GAAA/D,QAAAF,IACIkE,WAAAb,EAAAW,GACAG,UAAAhB,EAAAa,GACAI,SAAAzB,EAAAqB,GACAK,GAAAA,WAEI,MAAAV,GAAA/D,KAAAwE,WAEJE,GAAAA,UAEI,MAAAf,GAAA3D,KAAAsE,YAAA,KAAAtE,KAAAyE,WA/IZ5F,OAAAC,eAAAP,EAAA,cAAAQ,OAAA,IAGAR,EAAA+B,QAAAD,MAEA,IAAAsE,GAAArG,EAAA,KAEA+F,EAAArC,EAAA2C,GAEAC,EAAAtG,EAAA,KAEAwF,EAAA9B,EAAA4C,GAIkMC,EAAA,SAAAC,GAI9L,GAAAC,KACA,OAAA,YACI,IAAA,GAAAC,GAAAC,UAAA5F,OAAkC6F,EAAA9C,MAAA4C,GAAoBG,EAAA,EAAAA,EAAAH,EAAAG,IAClDD,EAAAC,GAAAF,UAAAE,EACJ,IAAAC,GAAAC,KAAAC,UAAAJ,GAGAK,EAAAR,EAAAK,GAAAL,EAAAK,IAAAN,EAAAjB,MAAAxD,OAAA6E,EACA,OAAAK,KAiCRC,EAAA,WAII,GAAAC,IAAA,UAAA,WAAA,QAAA,QAAA,MAAA,OAAA,OAAA,SAAA,YAAA,UAAA,YAAA,WAEA,OAAAA,GAAAxC,OAAA,SAAAC,EAAAC,EAAAC,GAEI,GAAAsC,GAAA,GAAAtC,EAAA,EAIA,OAFAF,GAAAC,IAAAuC,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,GAEAxC,QAGRR,EAAAmC,EAAAW,EA7EA,OAoJAjH,GAAA+B,QAAA4D,EApJA1F,EAAAD","file":"histogramr.min.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Maybe = function () {\n    function Maybe(x) {\n        _classCallCheck(this, Maybe);\n\n        this.__value = x;\n    }\n\n    _createClass(Maybe, [{\n        key: \"map\",\n        value: function map(f) {\n\n            return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value));\n        }\n    }, {\n        key: \"isNothing\",\n        value: function isNothing() {\n\n            return this.__value === null || this.__value === undefined;\n        }\n    }, {\n        key: \"join\",\n        value: function join() {\n\n            return this.isNothing() ? Maybe.of(null) : this.__value;\n        }\n    }, {\n        key: \"emit\",\n        value: function emit() {\n\n            return this.__value;\n        }\n    }]);\n\n    return Maybe;\n}();\n\nMaybe.of = function (x) {\n    return new Maybe(x);\n};\n\nexports.default = Maybe;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n* Converts a value to a string appropriate for entry into a CSV table.  E.g., a string value will be surrounded by quotes.\n* @param {string|number|object} theValue\n* @param {string} sDelimiter The string delimiter.  Defaults to a double quote (\") if omitted.\n*/\nfunction toCsvValue(theValue, sDelimiter) {\n    var t = typeof theValue === \"undefined\" ? \"undefined\" : _typeof(theValue);\n    var output = void 0,\n        stringDelimiter = void 0;\n\n    if (typeof sDelimiter === \"undefined\" || sDelimiter === null) stringDelimiter = '\"';else stringDelimiter = sDelimiter;\n\n    if (t === \"undefined\" || t === null) output = '';else if (t === 'string') output = sDelimiter + theValue + sDelimiter;else output = String(theValue);\n\n    return output;\n}\n\n/**\n* Converts an array of objects (with identical schemas) into a CSV table.\n* @param {Array} objArray An array of objects.  Each object in the array must have the same property list.\n* @param {string} sDelimiter The string delimiter.  Defaults to a double quote (\") if omitted.\n* @param {string} cDelimiter The column delimiter.  Defaults to a comma (,) if omitted.\n* @return {string} The CSV equivalent of objArray.\n*/\nfunction toCsv(objArray, sDelimiter, cDelimiter) {\n    var i = void 0,\n        l = void 0,\n        names = [],\n        name = void 0,\n        value = void 0,\n        obj = void 0,\n        row = void 0,\n        output = \"\",\n        n = void 0,\n        nl = void 0;\n\n    // Initialize default parameters.\n    if (typeof sDelimiter === \"undefined\" || sDelimiter === null) {\n        sDelimiter = '\"';\n    }\n    if (typeof cDelimiter === \"undefined\" || cDelimiter === null) {\n        cDelimiter = \",\";\n    }\n\n    for (i = 0, l = objArray.length; i < l; i += 1) {\n        // Get the names of the properties.\n        obj = objArray[i];\n        row = \"\";\n        if (i === 0) {\n            // Loop through the names\n            for (name in obj) {\n                if (obj.hasOwnProperty(name)) {\n                    names.push(name);\n                    row += [sDelimiter, name, sDelimiter, cDelimiter].join(\"\");\n                }\n            }\n            row = row.substring(0, row.length - 1);\n            output += row;\n        }\n\n        output += \"\\n\";\n        row = \"\";\n        for (n = 0, nl = names.length; n < nl; n += 1) {\n            name = names[n];\n            value = obj[name];\n            if (n > 0) {\n                row += \",\";\n            }\n            row += toCsvValue(value, '\"');\n        }\n        output += row;\n    }\n\n    return output;\n}\n\nexports.default = toCsv;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = undefined;\n\nvar _Maybe = require('./lib/Maybe');\n\nvar _Maybe2 = _interopRequireDefault(_Maybe);\n\nvar _csv = require('./lib/csv');\n\nvar _csv2 = _interopRequireDefault(_csv);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar memoize = function memoize(fn) {\n\n    var cache = {};\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var stringifiedArgs = JSON.stringify(args);\n        var result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn.apply(undefined, args);\n        return result;\n    };\n};\n\nfunction parseChartColumns(arr) {\n\n    var obj = {};\n\n    Object.keys(monthOfTheYear()).forEach(function (key) {\n\n        obj[key] = monthOfTheYear()[key].map(function (val) {\n\n            return Number(arr[val]);\n        });\n    });\n\n    return obj;\n}\n\nfunction getTaxaList(arr) {\n\n    var startLine = 15;\n\n    return arr.reduce(function (prev, current, index) {\n\n        if (index < startLine) return prev;\n\n        var tabs = current.split(/\\t/);\n\n        if (tabs.length) prev[tabs[0]] = parseChartColumns(tabs);\n\n        return prev;\n    }, {});\n}\n\nvar _monthOfTheYear = function _monthOfTheYear() {\n\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'Novermber', 'December'];\n\n    return months.reduce(function (prev, current, index) {\n\n        var oneIndex = (index + 1) * 4;\n\n        prev[current] = [oneIndex - 3, oneIndex - 2, oneIndex - 1, oneIndex];\n\n        return prev;\n    }, {});\n};\nvar monthOfTheYear = memoize(_monthOfTheYear);\n\nfunction getTaxa(arr) {\n\n    var position = 10;\n\n    return Number(arr[position].split(/\\t/)[1]);\n}\n\nfunction getSampleSize(arr) {\n\n    var position = 13;\n\n    return parseChartColumns(arr[position].split(/\\t/).slice(1));\n}\n\nfunction sampleToCsv(val) {\n\n    var sample = [\"Sample Size\"];\n\n    Object.keys(val).forEach(function (key) {\n\n        sample.push.apply(sample, _toConsumableArray(val[key]));\n    });\n\n    return (0, _csv2.default)([sample]).split(/\\n/).slice(1);\n}\n\nfunction taxaToCsv(val) {\n\n    var arr = [];\n\n    Object.keys(val).forEach(function (key) {\n\n        var obj = {};\n\n        obj.name = key;\n\n        Object.keys(val[key]).forEach(function (val2) {\n\n            obj[val2 + '_1'] = val[key][val2][0];\n            obj[val2 + '_2'] = val[key][val2][1];\n            obj[val2 + '_3'] = val[key][val2][2];\n            obj[val2 + '_4'] = val[key][val2][3];\n        });\n\n        arr.push(obj);\n    });\n\n    arr.pop();\n\n    return (0, _csv2.default)(arr);\n}\n\nfunction processFile(str) {\n\n    var lines = str.split(/\\n/);\n\n    return _Maybe2.default.of({\n        sampleSize: getSampleSize(lines),\n        taxaCount: getTaxa(lines),\n        taxaList: getTaxaList(lines),\n        get taxaCsv() {\n\n            return taxaToCsv(this.taxaList);\n        },\n        get allCsv() {\n\n            return sampleToCsv(this.sampleSize) + '\\n' + this.taxaCsv;\n        }\n    });\n}\n\nexports.default = processFile;"]}